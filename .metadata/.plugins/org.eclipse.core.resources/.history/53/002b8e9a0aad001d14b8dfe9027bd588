┌──────────────────────────────────────────────────
│	스프링 MVC 하루만에 배우기
│	::: 2023-02-15
└────────────────────────────────────────────────

1. 필요한 프로그램 설치

	- JDK 1.8 설정
	- 이클립스 4.16 (2020-06 R)
	- Spring Tool Suite 3.9.14.RELEASE plugins
	- Apache-tomcat 8.5.x
	
┌───────────────────────────────────────────────────
│	이클립스 설치 후, 진행해야 할 사항등
│	1) enc 타입으로 인코딩 설정
│	2) 본인이 원하는 font로 설정 (옵션) ::: 개인적으로 consolar 설정함
│	3) perspective java-ee 설정(default)
│	4) sts 플러그인 설치
│		- help > eclipes marketplace
│		- spring tool 3 standalone edition 검색 후 install 진행
└────────────────────────────────────────────────────────────

2. Book 게시판 프로젝트 설정하기
	
	2-1) Spring Legacy Project 생성하기
		- 프로젝트명 : SampleSpringYse
		- Spring MVC Project Template 선택
		- 패키지명 : kr.or.ddit
		
	2-2) 프로젝트 환경설정
		- Java Build Path 설정
			*** Build Path 3대장 설정!!!
			> JDK 1.8
			> Maven
			> Apache-Tomcat
		- Java Facets 설정
			> 서블릿 3.1
			> Java 1.8
			*** 이런 설정 부분은 내가 속해있는 팀 내에서 또는 회사 내에서 사용중인 버전으로 설정
			
	2-3) 메이븐 자바 버전을 1.8로 변경
		- pom.xml안에서 java-version을 1.8로 변경
		
	2-4) 메이븐 스프링 버전을 5.3.25
		- 메이븐 설정 후, Maven Clean / Maven Build를 진행 한다.
			> Goals : compile 설정
		- 스프링 5.3.25 버전은 JDK 1.8이 호환되는 버전입니다. / 6.x.x대는 JDK 17이상 호환
		
	2-5) Apache-tomcat 설정
		- SampleSpringYse 서버에 올리기
		- Tomcat OverView timeout Start 120설정
		- Tomcat Module ContextPath '/' 설정
		
	2-6) 인코딩 필터 설정
		- 요청(request)과 응답(response)을 모두 UTF-8로 고정하기 위해 인코딩 필터를 설정
		- web.xml 설정(root태그의 레벨을 debug로 설정)
		
	2-7) 로그 레벨 설정
		- log4j.xml 설정(root태그의 레벨을 debug로 설정)
		
	2-8) 기존에 작성된 홈 컨트롤러, 뷰 삭제
		- Controller, jsp 페이지 삭제
	
	2-9) root-context 추가
		- db 설정
		- sqlSessionTemplate 설정
		
3. Book 게시판 만들기
	
	3-1) 책 등록 컨트롤러 생성
		- class BookInsertController 생성
		
	3-2) 책 등록 컨트롤러 메소드 생성
		- public ModelAndView BookForm()
		
	3-3) 책 등록 화면 생성
		- view/book/form.jsp
		
	3-4) 책 등록 화면 확인하기
		> 서버 로드 시, 이상있는지 없는지 확인하기
		> 서버 로드 시 이상 있는 경우 xml설정 부 확인요망
		> 페이지가 정확하게 load되는지 단계별 검증
		
	3-5) 책 관리 데이터베이스 생성
		- 계정명 : yse / java
		
	3-6) 책 관리 테이블 생성
		create table book(
			book_id number(8) not null,
			title varchar2(200) not null,
			category varchar2(200) default '' not null,
			price number(8) null,
			insert_date date default sysdate null,
			constraint pk_book primary key(book_id)
		);
		
		create sequence seq_book increment by java start with 1 nocache;
		
	3-7) 메이븐 데이터베이스 라이브러리 설정
		- mybatis
		- mybatis-spring
		- spring-jdbc
		- commons-dbcp2
		- log4jdbc-log4j2-jdbc4
		- ojdbc8
       *** 설정 후, Maven clean > Maven Build 또는 Maven의 Update project 진행
		
	3-8) 데이터 소스 설정
		- root-context.xml 설정
		
	┌───────────────────────────────────
	│	책 입력 만들기
	└──────────────────────────────────
	
	3-9) 책 입력 기능 쿼리 생성
		- resources source package 아래에 sqlmap 폴더 생성
		- book_SQL.xml 생성
		- 책 입력 기능 쿼리 작성
			<insert id="insert" parameterType="hashMap" useGeneratedKeys="true"></insert>
			
	3-10) 책 입력 DAO 생성
		- class BookDAO
		- @Repository 어노테이션으로 데이터를 취급하는 빈이라고 알린다.
		
	3-11) 책 입력 DAO 메소드 생성
		- public int insert(@RequestParam Map<String, Object> map)
		
	3-12) 책 입력 service 인터페이스 메소드 생성
		- interface IBookService
		- public String insertBook(Map<String, Object> map)
		
	3-13) 책 입력 Service 클래스 생성
		- IBookService interface를 참조받은 구현체 클래스
		- public String insertBook(Map<String, Object> map)
		- @Service 어노테이션으로 비지니스 로직을 담당하는 빈이라고 알린다.
		
	3-14) 책 입력 컨트롤러 메소드 생성
		- public ModelAndView insertBook(@RequestParam Map<String, Object> map)
		- @Controller 어노테이션으로 컨트롤러를 담당하는 빈이라고 알린다.
		
	3-15) 책 입력 화면을 출력하고 책 등록 확인하기
		- 결과 404에러 발생
			> 등록 화면에서 등록은 이뤄지나, 등록 후 동라갈 페이지가 연동되어 있지 않아 에러 발생(정상)
			
	┌───────────────────────────────────
	│	책 상세보기 만들기
	└──────────────────────────────────
	
	3-16) 책 상세보기 기능 쿼리 생성
		- 책 상세 기능 쿼리 작성
		- <select id="selectBook" parameterType="hashMap" resultType="hashMap"></select>
		
	3-17) 책 상세보기 DAO 메소드 생성
		- public Map<String, Object> selectBook(Map<String, Object> map)
		
	3-18) 책 상세보기 Service 인터페이스 메소드 생성
		- public Map<String, Object> selectBook(Map<String, Object> map)
		
	3-19) 책 상세보기 Service 클래스 메소드 생성
		- public Map<String, Object> selectBook(Map<String, Object> map)
	
	3-20) 책 상세 화면 생성
		- views/book/detail.jsp
		
	3-21) 책 상세보기 화면을 출력하고 책 상세보기 확인하기
	
	┌──────────────────────────────────
	│	책 수정 만들기
	└──────────────────────────────────
	
	3-22) 책 수정 화면 컨트롤러 메소드 생성
		- public ModelAndView update(@RequestParam Map<String, Object> map)
		
	3-23) 책 수정 화면 뷰 생성
		- views/book/update.jsp
		
	3-24) 책 수정 화면 확인하기
	
	3-25) 책 수정 기능 쿼리 생성
		- 책 수정 기능 쿼리 작성
		- <update id="update" parameterType="hashMap"></update>
		
	3-26) 책 수정 기능 DAO 메소드 생성
		- public int update(Map<String, Object> map)
		
	3-27) 책 수정 기능 Service 인터페이스 메소드 생성
		- public boolean updateBook(Map<String, Object> map)
		
	3-28) 책 수정 기능 Service 클래스 메소드 생성
		- public boolean updateBook(Map<String, Object> map)
		
	3-29) 책 수정 기능 컨트롤러 메소드 생성
		- public ModelAndView updateBook(@RequestParam Map<String, Object> map)
		
	3-30) 책 수정 기능 확인하기
		- 책 수정 기능 > 책 상세보기
		
	┌──────────────────────────────────
	│	책 삭제 만들기
	└──────────────────────────────────
	
	3-31) 책 삭제 기능 쿼리 생성
		- 책 삭제 기능 쿼리 작성
		- <delete id="delete" parameterType="hashMap"></delete>
		
	3-32) 책 삭제 기능 DAO 메소드 생성
		- public int delete(Map<String, Object> map)
		
	3-33) 책 삭제 기능 Service 인터페이스 메소드 생성
		- public boolean removeBook(Map<String, Object> map)
		
	3-34) 책 삭제 기능 Service 클래스 메소드 생성
		- public boolean removeBook(Map<String, Object> map)
	
	3-35) 책 삭제 기능 컨트롤러 메소드 생성
		- public ModelAndView deleteBook(@Re